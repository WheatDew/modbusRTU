/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Open 打开串口
extern int Open(char* name, unsigned int baud, unsigned char dBits, char parity, unsigned char sBits, unsigned int readTimeout, unsigned char* errMsg);

// Close 关闭串口
extern int Close(unsigned char* errMsg);

// ReadHoldingRegisters 读取保持寄存器
extern int ReadHoldingRegisters(unsigned char* data, unsigned char addr, short unsigned int offset, short unsigned int num, char crcOrder, unsigned char* errMsg);

// WriteSingleRegister 写单个保持寄存器
extern int WriteSingleRegister(short unsigned int data, unsigned char addr, short unsigned int offset, char crcOrder, unsigned char* errMsg);

// WriteMultiRegisters 写多个连续保持寄存器
extern int WriteMultiRegisters(short unsigned int* data, int dataLen, unsigned char addr, short unsigned int offset, char crcOrder, unsigned char* errMsg);

// NRWriteMultiRegisters 写多个连续保持寄存器
extern int NRWriteMultiRegisters(short unsigned int* data, int dataLen, unsigned char addr, short unsigned int offset, char crcOrder, unsigned char* errMsg);

#ifdef __cplusplus
}
#endif
